#!/bin/sh

set -eu

usage() {
    echo 'Usage: ./webize.sh [OPTIONS]'
    echo '  Subcommands:'
    echo '      gallery             Generate a gallery index.htm'
    echo '      clean               Removes all index.htm'
    echo 'Examples: '
    echo '      # Generates a gallery index.htm for current directory and all descendent folders which contain images'
    echo '      ./webize.sh gallery .'
    echo
    echo '      # Generates a gallery index.html for /path/to/camera/roll and all descendent folders which contain images'
    echo '      ./webize.sh gallery /path/to/camera/roll'
    echo
    echo '      # Clean all index.htm for current directory and all descendent folders'
    echo '      ./webize.sh clean /path/to/camera/roll'
    echo
    echo '      # Clean all index.htm for /path/to/camera/roll and all descendent folders'
    echo '      ./webize.sh clean /path/to/camera/roll'
}
# Exit if we got no options
if [ $# -eq 0 ]; then usage; exit 1; fi

# Get some options
while test $# -gt 0; do
    case "$1" in
        help|-h|--help)
            usage
            exit 0
            ;;
        gallery)
            GALLERY=1
            shift
            if test $# -gt 0; then
                export DIR="$1"
                shift
            else
                echo "Please specify a directory as a third argument. E.g. /path/to, or . for current directory" 1>&2
                exit 1
            fi
            ;;
        clean)
            CLEAN=1
            shift
            if test $# -gt 0; then
                export DIR="$1"
                shift
            else
                echo "Please specify a directory as a third argument. E.g. /path/to, or . for current directory" 1>&2
                exit 1
            fi
            ;;
        *)
            echo "Invalid option '$1'" 1>&2
            usage
            exit 1
            ;;
    esac
done

# Normalize, compile, and validation configuration
DIR=${DIR:-}
GALLERY=${GALLERY:-}
CLEAN=${CLEAN:-}
if [ ! -d "$DIR" ]; then
    echo "Directory does not exist: $DIR" 1>&2
    exit 1
fi
if [ "$DIR" = '.' ]; then
    DIR="$PWD"
fi

# Get directories with images
dirs=$(
    find "$DIR" -type d | while read -r d; do
        if ls -p "$d" | grep -v '/' | grep -E '\.png|\.jpg|\.webp|\.svg' > /dev/null; then
            echo "$d"
        fi
    done | sort -n
)
if [ -z "$dirs" ]; then
    echo "No directories with images found." 1>&2
    exit 1
fi

# Generate index.htm in each directory
echo "$dirs" | while read -r d; do
    indexHtm="$d/index.htm"
    images=$( ls -p "$d" | grep -v '/' | grep -E '\.png|\.jpg|\.webp|\.svg' )

    echo '
    <html lang="en">
    <head>
        <meta charset="utf-8">
        <style>
            html { width: 100%; height: 100%; background: #000; font-size: 0; }
            body { margin: 0; }
            menu { position: fixed; bottom: 0; left: 0; right: 0; z-index: 1000; display: block; padding: 1vw; background: #000; opacity: 1; text-align: center; user-select: none; }
            menu fullscreen, menu stretchx, menu stretchy, menu tilesmaller, menu tilelarger, menu imagelabeller, menu pin { display: inline-block; margin-right: 2vw; /*width: calc( 4vw + 2px ); height: calc( 4vw + 2px ); border: 1px solid #fff; border-radius: 50%; */ padding: 1vw; font-size: 2vw; color: #fff; cursor: pointer; }
            content:before { content: ""; display: inline-block; vertical-align: middle; height: 100%; }
            content { display: block; text-align: center; }
            gallery { display: inline-block; width: 100%; text-align: center; vertical-align: middle; }
            imageholder { position: relative; display: inline-block; margin: 0 auto; width: calc( 100% / 7 ); }
            imageholder info { position: absolute; top: 0; left: 0; right: 0; z-index: 0; }
            imageholder info label { display: block; background: #000; color: #fff; font-size: 1vw; font-family: monospace; }
            imageholder img { display: inline-block; margin: 0 auto; width: 100%; height: auto; }
        </style>
    </head>
    <body>
        <menu>
            <fullscreen>üíª</fullscreen>
            <stretchx>‚ÜïÔ∏è</stretchx>
            <stretchy>‚ÜîÔ∏è</stretchy>
            <tilesmaller>üêú</tilesmaller>
            <tilelarger>ü¶ï</tilelarger>
            <imagelabeller>üè∑</imagelabeller>
            <pin>üìå</pin>
        </menu>
        <content>
            <gallery>
    ' > "$d/index.htm"
    echo "$images" | while read -r i; do
        echo "
                <imageholder>
                    <info>
                        <label>$i</label>
                    </info>
                    <img src=\"$i\" />
                </imageholder>
            " >> "$indexHtm"
    done
    echo '
            </gallery>
        </content>
        <script>
            var menu = (function() {
                var rootElement = document.getElementsByTagName("menu")[0];
                var isPinned = true;

                rootElement.addEventListener("mouseenter", function(e) {
                    if (isPinned) {
                        rootElement.style.opacity = "1";
                    }else {
                        rootElement.style.opacity = "1";
                    }
                });
                rootElement.addEventListener("mouseleave", function(e) {
                    if (isPinned) {
                        rootElement.style.opacity = "1";
                    }else {
                        rootElement.style.opacity = "0";
                    }
                });
                rootElement.getElementsByTagName("fullscreen")[0].addEventListener("click", function(e) {
                    document.documentElement.requestFullscreen();
                });
                rootElement.getElementsByTagName("stretchx")[0].addEventListener("click", function(e) {
                    gallery.stretchx();
                });
                rootElement.getElementsByTagName("stretchy")[0].addEventListener("click", function(e) {
                    gallery.stretchy();
                });
                rootElement.getElementsByTagName("tilesmaller")[0].addEventListener("click", function(e) {
                    gallery.tilesmaller();
                });
                rootElement.getElementsByTagName("tilelarger")[0].addEventListener("click", function(e) {
                    gallery.tilelarger();
                });
                rootElement.getElementsByTagName("imagelabeller")[0].addEventListener("click", function(e) {
                    var imagelabeller = document.getElementsByTagName("imagelabeller")[0];
                    if (gallery.isImagesLabelled) {
                        isPinned = true;
                        gallery.isImagesLabelled = false;
                        rootElement.style.opacity = "";
                        imagelabeller.style.opacity = "0.5";
                    }else {
                        gallery.isImagesLabelled = true;
                        isPinned = false;
                        rootElement.style.opacity = "";
                        imagelabeller.style.opacity = "1.0";
                    }
                });
                rootElement.getElementsByTagName("pin")[0].addEventListener("click", function(e) {
                    var pin = document.getElementsByTagName("pin")[0];
                    if (isPinned) {
                        isPinned = false;
                        rootElement.style.opacity = "";
                        pin.style.opacity = "0.5";
                    }else {
                        isPinned = true;
                        rootElement.style.opacity = "";
                        pin.style.opacity = "";
                    }
                });

                return {

                }
            })();

            var gallery = (function() {
                var rootElement = document.getElementsByTagName("gallery")[0];

                // Defaults
                var tileFactor = 7;
                const minTileFactor = 2;
                const maxTileFactor = 10;
                var isTiled = true;
                var isImagesLabelled = true;

                var images = rootElement.getElementsByTagName("img");
                var activeImageIndex = 0;

                var scrollToActiveImage = function() {
                    console.log("Scrolling to active image, index: " + activeImageIndex + ", offsetTop: " + images[activeImageIndex].parentNode.offsetTop);
                    window.scroll(0, images[activeImageIndex].parentNode.offsetTop);
                };

                // Set element of interest while scrolling
                rootElement.addEventListener("wheel", function(e) {
                    for (var i = images.length - 1; i > 0; i--) {
                        if (images[i].parentNode.offsetTop < window.scrollY) {
                            console.log("Setting active image: " + i);
                            activeImageIndex = i;
                            break;
                        }
                    }
                });

                // Set as element of interest while clicking or focusing
                var setActiveImageIndexHandler = function(e) {
                    var ele = event.target || event.srcElement;
                    var imageholder = ele.parentNode;
                    activeImageIndex = Array.from(imageholder.parentNode.children).indexOf(imageholder); // Wrapper
                    console.log("Set active image: " + activeImageIndex);
                    console.log("Selected image: " + activeImageIndex);
                    stretchy();
                };
                // var showActiveImageLabelHandler = function(e) {
                //     if (isImagesLabelled) {
                //         var ele = event.target || event.srcElement;
                //         var imageholder = ele.parentNode;
                //         imageholder.getElementsByTagName("label")[0].style.fontSize = "1vw";
                //     }
                // };
                // var hideActiveImageLabelHandler = function(e) {
                //     if (!isImagesLabelled) {
                //         var ele = event.target || event.srcElement;
                //         var imageholder = ele.parentNode;
                //         imageholder.getElementsByTagName("label")[0].style.fontSize = "0";
                //     }
                // };
                for (var i = 0; i < images.length; i++) {
                    images[i].addEventListener("click", setActiveImageIndexHandler);
                    images[i].addEventListener("focus", setActiveImageIndexHandler);

                    // images[i].addEventListener("click", showActiveImageLabelHandler);
                    // images[i].addEventListener("focus", showActiveImageLabelHandler);
                    // images[i].addEventListener("mouseenter", showActiveImageLabelHandler);

                    // images[i].addEventListener("focusout", hideActiveImageLabelHandler);
                    // images[i].addEventListener("focusout", hideActiveImageLabelHandler);
                    // images[i].addEventListener("mouseleave", hideActiveImageLabelHandler);
                }

                var stretchx = function() {
                    for (var i = 0; i < images.length; i++) {
                        images[i].parentNode.style.display = "inline-block";
                        images[i].parentNode.style.width = "100%";
                        images[i].style.width = "100%";
                        images[i].style.height = "auto";
                    }
                    isTiled = false;
                    scrollToActiveImage();
                };

                var stretchy = function() {
                    for (var i = 0; i < images.length; i++) {
                        images[i].parentNode.style.display = "inline-block";
                        images[i].parentNode.style.width = "100%";
                        images[i].style.width = "auto";
                        images[i].style.height = "100vh";
                    }
                    isTiled = false;
                    scrollToActiveImage();
                };

                var tilesmaller = function() {
                    if (!isTiled) {
                        isTiled = true;
                    }else {
                        tileFactor = tileFactor === maxTileFactor ? maxTileFactor : tileFactor + 1;
                    }
                    for (var i = 0; i < images.length; i++) {
                        images[i].parentNode.style.display = "inline-block";
                        images[i].parentNode.style.width = "calc(100% / " + tileFactor + ")";
                        images[i].style.width = "100%";
                        images[i].style.height = "auto";
                    }
                    isTiled = true;
                };

                var tilelarger = function() {
                    if (!isTiled) {
                        isTiled = true;
                    }else {
                        tileFactor = tileFactor === minTileFactor ? minTileFactor : tileFactor - 1;
                    }
                    for (var i = 0; i < images.length; i++) {
                        images[i].parentNode.style.display = "inline-block";
                        images[i].parentNode.style.width = "calc(100% / " + tileFactor + ")";
                        images[i].style.width = "100%";
                        images[i].style.height = "auto";
                    }
                    isTiled = true;
                }

                var showAllImageLabels = function() {
                    for (var i = 0; i < images.length; i++) {
                        var imageholder = images[i].parentNode;
                        imageholder.getElementsByTagName("label")[0].style.fontSize = "1vw";
                    }
                };
                var hideAllImageLabels = function() {
                    for (var i = 0; i < images.length; i++) {
                        var imageholder = images[i].parentNode;
                        imageholder.getElementsByTagName("label")[0].style.fontSize = "0";
                    }
                };

                return {
                    stretchx: stretchx,
                    stretchy: stretchy,
                    tilesmaller: tilesmaller,
                    tilelarger: tilelarger,
                    get isImagesLabelled() {
                        return isImagesLabelled;
                    },
                    set isImagesLabelled(value) {
                        isImagesLabelled = value;
                        if (isImagesLabelled) {
                            showAllImageLabels();
                        }else {
                            hideAllImageLabels();
                        }
                    }
                };
            })();
        </script>
    </body>
    </html>
    ' >> "$indexHtm"
    echo "$indexHtm"
done
