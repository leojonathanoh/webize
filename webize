#!/bin/sh

set -u

usage() {
    echo 'Usage: ./webize.sh [OPTIONS]'
    echo '  Subcommands:'
    echo '      gallery             Generate a gallery index.htm'
    echo '      clean               Removes all index.htm'
    echo 'Examples: '
    echo '      # Generate a gallery index.htm for current directory and all descendent folders which contain images'
    echo '      ./webize.sh gallery .'
    echo
    echo '      # Generate a gallery index.htm for /path/to/camera/roll and all descendent folders which contain images, and open them in firefox'
    echo '      ./webize.sh gallery /path/to/camera/roll | xargs firefox'
    echo
    echo '      # Clean all index.htm for current directory and all descendent folders which contain images'
    echo '      ./webize.sh clean .'
    echo
    echo '      # Clean all index.htm for /path/to/camera/roll and all descendent folders which contain images'
    echo '      ./webize.sh clean /path/to/camera/roll'
}
# Exit if we got no options
if [ $# -eq 0 ]; then usage; exit 1; fi

# Get some options
while test $# -gt 0; do
    case "$1" in
        help|-h|--help)
            usage
            exit 0
            ;;
        gallery)
            GALLERY=1
            shift
            if test $# -gt 0; then
                export DIR="$1"
                shift
            else
                echo "Please specify a directory as a third argument. E.g. /path/to, or . for current directory" 1>&2
                exit 1
            fi
            ;;
        clean)
            CLEAN=1
            shift
            if test $# -gt 0; then
                export DIR="$1"
                shift
            else
                echo "Please specify a directory as a third argument. E.g. /path/to, or . for current directory" 1>&2
                exit 1
            fi
            ;;
        *)
            echo "Invalid option '$1'" 1>&2
            usage
            exit 1
            ;;
    esac
done

# Normalize, compile, and validation configuration
DIR=${DIR:-}
GALLERY=${GALLERY:-}
CLEAN=${CLEAN:-}
if [ ! -d "$DIR" ]; then
    echo "Directory does not exist: $DIR" 1>&2
    exit 1
fi
if [ "$DIR" = '.' ]; then
    DIR="$PWD"
fi

# Get directories with images
dirs=$(
    find "$DIR" -type d | while read -r d; do
        if ls -p "$d" | grep -v '/' | grep -E '\.png|\.jpg|\.webp|\.svg' > /dev/null; then
            echo "$d"
        fi
    done | sort -n
)
if [ -z "$dirs" ]; then
    echo "No directories with images found." 1>&2
    exit 1
fi

# Generate index.htm in each directory
if [ -n "$GALLERY" ]; then
    echo "$dirs" | while read -r d; do
        indexHtm="$d/index.htm"
        images=$( ls -p "$d" | grep -v '/' | grep -E '\.png|\.jpg|\.webp|\.svg' )

        echo '
<html lang="en">
<head>
    <meta charset="utf-8">
    <style>
        * { box-sizing: border-box; }
        html { width: 100%; height: 100%; background: #000; font-size: 0; }
        body { margin: 0; }
        menu { position: fixed; top: calc(100vh - 2vw - 4vw); bottom: 0; left: 0; right: 0; z-index: 1000; display: block; padding: 1vw; background: #000; opacity: 1; text-align: center; user-select: none; }
        menu fullscreen, menu stretchx, menu stretchy, menu tilesmaller, menu tilelarger, menu imagelabeller, menu pin { display: inline-block; margin-right: 2vw; padding: 1vw; font-size: 2vw; line-height: 2vw; color: #fff; cursor: pointer; }
        content:before { content: ""; display: inline-block; vertical-align: middle; height: 100%; }
        content { display: block; text-align: center; }
        gallery { display: inline-block; width: 100%; text-align: center; vertical-align: middle; }
        imageholder { position: relative; display: inline-block; margin: 0 auto; border: 1px solid transparent; }
        imageholder.highlight { border: 1px solid #fff; }
        imageholder info { position: absolute; top: 0; left: 0; right: 0; z-index: 0; }
        imageholder info label { display: block; background: #000; color: #fff; font-size: 1vw; line-height: 1vw; font-family: monospace; }
        imageholder img { display: inline-block; margin: 0 auto; width: 100%; height: auto; }
    </style>
</head>
<body>
    <menu>
        <fullscreen title="Full Screen (F)" alt="Full Screen (F)">üíª</fullscreen>
        <stretchx title="Stretch horizontal (X)" alt="Stretch horizontal (X)">‚ÜîÔ∏è</stretchx>
        <stretchy title="Stretch vertical (Y)" alt="Stretch vertical (Y)">‚ÜïÔ∏è</stretchy>
        <tilesmaller title="Tile smaller (-)" alt="Tile smaller (-)">üêú</tilesmaller>
        <tilelarger title="Tile larger (+)" alt="Tile larger (=)">ü¶ï</tilelarger>
        <imagelabeller title="Show / Hide label (L)" alt="Show / Hide label (L)">üè∑</imagelabeller>
        <pin title="Pin / Unpin menu (P)" alt="Pin / Unpin menu (P)">üìå</pin>
    </menu>
    <content>
        <gallery>
    ' > "$d/index.htm"
        echo "$images" | while read -r i; do
            echo "
                <imageholder>
                    <info>
                        <label>$i</label>
                    </info>
                    <img src=\"$i\" />
                </imageholder>
            " >> "$indexHtm"
        done
        echo '
        </gallery>
    </content>
    <script>
        var menu = (function() {
            var rootElement = document.getElementsByTagName("menu")[0];
            var isPinned = true;
            var isMouseEntered = false;

            rootElement.addEventListener("mouseenter", function(e) {
                isMouseEntered = true;
                rootElement.style.opacity = "1";
                rootElement.style.paddingTop = "";
            });
            rootElement.addEventListener("mouseleave", function(e) {
                isMouseEntered = false;
                if (!isPinned) {
                    rootElement.style.opacity = "0";
                    rootElement.style.paddingTop = "100vh"; // Push the menu items out of viewport
                }
            });

            var toggleFullscreenHandler = function() {
                document.documentElement.requestFullscreen();
            };
            rootElement.getElementsByTagName("fullscreen")[0].addEventListener("click", function(e) {
                toggleFullscreenHandler();
            });

            rootElement.getElementsByTagName("stretchx")[0].addEventListener("click", function(e) {
                gallery.mode = "stretchx";
            });
            rootElement.getElementsByTagName("stretchy")[0].addEventListener("click", function(e) {
                gallery.mode = "stretchy";
            });
            rootElement.getElementsByTagName("tilesmaller")[0].addEventListener("click", function(e) {
                gallery.mode = "tilesmaller";
            });
            rootElement.getElementsByTagName("tilelarger")[0].addEventListener("click", function(e) {
                gallery.mode = "tilelarger";
            });

            var toggleLabelHandler = function() {
                var imagelabeller = document.getElementsByTagName("imagelabeller")[0];
                if (gallery.isImagesLabelled) {
                    gallery.isImagesLabelled = false;
                    imagelabeller.style.opacity = "0.5";
                }else {
                    gallery.isImagesLabelled = true;
                    imagelabeller.style.opacity = "1.0";
                }
            };
            rootElement.getElementsByTagName("imagelabeller")[0].addEventListener("click", function(e) {
                toggleLabelHandler();
            });

            var togglePinHandler = function() {
                var pin = document.getElementsByTagName("pin")[0];
                if (isPinned) {
                    isPinned = false;
                    if (isMouseEntered) {
                        rootElement.style.opacity = "";
                        rootElement.style.paddingTop = "";
                    }else {
                        rootElement.style.opacity = "0";
                        rootElement.style.paddingTop = "100vh"; // Push the menu items out of viewport
                    }
                    pin.style.opacity = "0.5";
                }else {
                    isPinned = true;
                    rootElement.style.opacity = "1.0";
                    rootElement.style.paddingTop = "";
                    pin.style.opacity = "1.0";
                }
            };
            rootElement.getElementsByTagName("pin")[0].addEventListener("click", function(e) {
                togglePinHandler();
            });


            var keyHandler = function(event) {
                var ele = event.target || event.srcElement;
                var keyCode = event.keyCode || event.charCode;

                // f key
                if (keyCode === 70) {
                    toggleFullscreenHandler();
                }
                // l key
                if (keyCode === 76) {
                    toggleLabelHandler();
                }
                // p key
                if (keyCode === 80) {
                    togglePinHandler();
                }

                // console.log(keyCode);
            };

            return {
                keyHandler: keyHandler,
                togglePinHandler: togglePinHandler
            };
        })();

        var gallery = (function() {
            var rootElement = document.getElementsByTagName("gallery")[0];

            // Defaults
            var mode = "tilesmaller";
            var tileFactor = 7;
            const minTileFactor = 2;
            const maxTileFactor = 10;
            var isImagesLabelled = true;

            var images = rootElement.getElementsByTagName("img");
            var activeImageIndex = 0;

            var stretchx = function() {
                for (var i = 0; i < images.length; i++) {
                    images[i].parentNode.style.display = "inline-block";
                    images[i].parentNode.style.width = "100%";
                    images[i].style.width = "100%";
                    images[i].style.height = "auto";
                }
                setActiveImageIndex(activeImageIndex, true);
            };

            var stretchy = function() {
                for (var i = 0; i < images.length; i++) {
                    images[i].parentNode.style.display = "inline-block";
                    images[i].parentNode.style.width = "100%";
                    images[i].style.width = "auto";
                    images[i].style.height = "100vh";
                }
                setActiveImageIndex(activeImageIndex, true);
            };

            var tilesmaller = function() {
                tileFactor = tileFactor === maxTileFactor ? maxTileFactor : tileFactor + 1;
                for (var i = 0; i < images.length; i++) {
                    images[i].parentNode.style.display = "inline-block";
                    images[i].parentNode.style.width = "calc(100% / " + tileFactor + ")";
                    images[i].style.width = "100%";
                    images[i].style.height = "auto";
                }
                setActiveImageIndex(activeImageIndex, true);
            };

            var tilelarger = function() {
                tileFactor = tileFactor === minTileFactor ? minTileFactor : tileFactor - 1;
                for (var i = 0; i < images.length; i++) {
                    images[i].parentNode.style.display = "inline-block";
                    images[i].parentNode.style.width = "calc(100% / " + tileFactor + ")";
                    images[i].style.width = "100%";
                    images[i].style.height = "auto";
                }
                setActiveImageIndex(activeImageIndex, true);
            };

            var resetImagesStyles = function() {
                for (var i = 0; i < images.length; i++) {
                    var imageholder = images[i].parentNode;
                    imageholder.className = "";
                }
            }

            var showAllImageLabels = function() {
                for (var i = 0; i < images.length; i++) {
                    var imageholder = images[i].parentNode;
                    imageholder.getElementsByTagName("label")[0].style.fontSize = "1vw";
                }
            };
            var hideAllImageLabels = function() {
                for (var i = 0; i < images.length; i++) {
                    var imageholder = images[i].parentNode;
                    imageholder.getElementsByTagName("label")[0].style.fontSize = "0";
                }
            };

            var setMode = function(value) {
                if (value) {
                    mode = value;
                }
                switch (value) {
                    case "stretchx":
                        stretchx();
                        break;
                    case "stretchy":
                        stretchy();
                        break;
                    case "tilesmaller":
                        tilesmaller();
                        break;
                    case "tilelarger":
                        tilelarger();
                        break;
                    default:
                        break;
                }
            };

            var setActiveImageIndex = function(value, scroll) {
                activeImageIndex = value;
                var imageholder;
                for (var i = 0; i < images.length; i++) {
                    imageholder = images[i].parentNode;
                    imageholder.className = "";
                }
                imageholder = images[activeImageIndex].parentNode;
                if (mode === "tilesmaller" || mode === "tilelarger") {
                    imageholder.className = "highlight";
                }
                if (scroll) {
                    scrollToActiveImage();
                }
                console.log("[setActiveImageIndex] activeImageIndex: " + activeImageIndex);
            }

            var setPreviousImageAsActiveImage = function() {
                if (activeImageIndex <= 0) {
                    setActiveImageIndex(0, true);
                }else {
                    var imageholder = images[activeImageIndex].parentNode;
                    var idx = Array.from(imageholder.parentNode.children).indexOf(imageholder); // Wrapper
                    idx -= 1;
                    setActiveImageIndex(idx, true);
                }
            };

            var setNextImageAsActiveImage = function() {
                if (activeImageIndex >= images.length - 1) {
                    setActiveImageIndex(images.length - 1, true);
                }else {
                    var imageholder = images[activeImageIndex].parentNode;
                    var idx = Array.from(imageholder.parentNode.children).indexOf(imageholder); // Wrapper
                    idx += 1;
                    setActiveImageIndex(idx, true);
                }
            };

            var setPreviousRowImageAsActiveImage = function() {
                var imageholder = images[activeImageIndex].parentNode;
                var idx = Array.from(imageholder.parentNode.children).indexOf(imageholder); // Wrapper
                idx -= tileFactor;
                if (idx <= 0) {
                    idx = 0;
                }
                setActiveImageIndex(idx, true);
            };

            var setNextRowImageAsActiveImage = function() {
                var imageholder = images[activeImageIndex].parentNode;
                var idx = Array.from(imageholder.parentNode.children).indexOf(imageholder); // Wrapper
                idx += tileFactor;
                if (idx >= images.length - 1) {
                    idx = images.length - 1;
                }
                setActiveImageIndex(idx, true);
            };

            var keyHandler = function(event) {
                var ele = event.target || event.srcElement;
                var keyCode = event.keyCode || event.charCode;

                // LEFT arrow key
                if (keyCode === 37) {
                    setPreviousImageAsActiveImage();
                    event.preventDefault();
                }
                // RIGHT arrow key
                if (keyCode === 39) {
                    setNextImageAsActiveImage();
                    event.preventDefault();
                }
                // UP arrow key
                if (keyCode === 38) {
                    if (mode === "tilesmaller" || mode === "tilelarger") {
                        setPreviousRowImageAsActiveImage();
                    }else {
                        setPreviousImageAsActiveImage();
                    }
                    event.preventDefault();
                }
                // DOWN arrow key
                if (keyCode === 40) {
                    if (mode === "tilesmaller" || mode === "tilelarger") {
                        setNextRowImageAsActiveImage();
                    }else {
                        setNextImageAsActiveImage();
                    }
                    event.preventDefault();
                }
                // ENTER key
                if (keyCode === 13) {
                    setMode("stretchy");
                    event.preventDefault();
                }
                // BACKSPACE key
                if (keyCode == 8) {
                    setMode("tilesmaller");
                    event.preventDefault();
                }
                // SPACE key
                if (keyCode == 32) {
                    setNextImageAsActiveImage();
                    event.preventDefault();
                }
                // ESC key (if in full screen, escapes full screen first, goes back to tiled view, and tiles smaller)
                if (keyCode === 27) {
                    setMode("tilesmaller");
                    event.preventDefault();
                }

                // x key
                if (keyCode === 88) {
                    setMode("stretchx");
                    event.preventDefault();
                }
                // y key
                if (keyCode === 89) {
                    setMode("stretchy");
                    event.preventDefault();
                }
                // - key
                if (keyCode === 173) {
                    setMode("tilesmaller");
                    event.preventDefault();
                }
                // = key
                if (keyCode === 61) {
                    setMode("tilelarger");
                    event.preventDefault();
                }

                // console.log(keyCode);
            };

            var scrollToActiveImage = function() {
                console.log("Scrolling to active image, index: " + activeImageIndex + ", offsetTop: " + images[activeImageIndex].parentNode.offsetTop);
                window.scroll(0, images[activeImageIndex].parentNode.offsetTop);
            };

            // Set element of interest while scrolling
            rootElement.addEventListener("wheel", function(e) {
                if (mode === "stretchx" || mode === "stretchy" ) {
                    for (var i = images.length - 1; i >= 0; i--) {
                        if (images[i].parentNode.offsetTop < window.scrollY) {
                            console.log("Setting active image: " + i);
                            setActiveImageIndex(i);
                            break;
                        }
                    }
                }
            });

            // Set as element of interest while clicking or focusing
            var clickOrFocusHandler = function(e) {
                if (mode === "stretchx" || mode === "stretchy" ) {
                    // Tap on image should toggle the menu
                    menu.togglePinHandler();
                }
                var ele = event.target || event.srcElement;
                var imageholder = ele.parentNode;
                var idx = Array.from(imageholder.parentNode.children).indexOf(imageholder); // Wrapper
                setActiveImageIndex(idx);
                setMode("stretchy");
            };
            // var showActiveImageLabelHandler = function(e) {
            //     if (isImagesLabelled) {
            //         var ele = event.target || event.srcElement;
            //         var imageholder = ele.parentNode;
            //         imageholder.getElementsByTagName("label")[0].style.fontSize = "1vw";
            //     }
            // };
            // var hideActiveImageLabelHandler = function(e) {
            //     if (!isImagesLabelled) {
            //         var ele = event.target || event.srcElement;
            //         var imageholder = ele.parentNode;
            //         imageholder.getElementsByTagName("label")[0].style.fontSize = "0";
            //     }
            // };
            for (var i = 0; i < images.length; i++) {
                images[i].addEventListener("click", clickOrFocusHandler);
                images[i].addEventListener("focus", clickOrFocusHandler);

                // images[i].addEventListener("click", showActiveImageLabelHandler);
                // images[i].addEventListener("focus", showActiveImageLabelHandler);
                // images[i].addEventListener("mouseenter", showActiveImageLabelHandler);

                // images[i].addEventListener("focusout", hideActiveImageLabelHandler);
                // images[i].addEventListener("focusout", hideActiveImageLabelHandler);
                // images[i].addEventListener("mouseleave", hideActiveImageLabelHandler);
            }

            return {
                get mode() {
                    return mode;
                },
                set mode(value) {
                    setMode(value);
                },
                get isImagesLabelled() {
                    return isImagesLabelled;
                },
                set isImagesLabelled(value) {
                    isImagesLabelled = value;
                    if (isImagesLabelled) {
                        showAllImageLabels();
                    }else {
                        hideAllImageLabels();
                    }
                },
                keyHandler: keyHandler
            };
        })();

        // App init
        gallery.mode = "tilesmaller";
        window.addEventListener("keydown", function (event) {
            menu.keyHandler(event);
            gallery.keyHandler(event);
        });
    </script>
</body>
</html>' >> "$indexHtm"
        echo "$indexHtm"
    done
fi

# Remove index.htm in each directory
if [ -n "$CLEAN" ]; then
    echo "$dirs" | while read -r d; do
        indexHtm="$d/index.htm"
        if [ -f "$indexHtm" ]; then
            rm -f "$indexHtm"
            echo "$indexHtm"
        fi
    done
fi
