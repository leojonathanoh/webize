#!/bin/sh

set -u

usage() {
    echo 'Usage: ./webize [OPTIONS]'
    echo 'Subcommands:'
    echo '  gallery [--scoped] <dir>    Generate a gallery index.htm'
    echo "    -s|--scoped               Scope index.htm to each descendent directory"
    echo '                              If omitted, image search is recursive'
    echo '  clean [--scoped] <dir>      Cleanup index.htm'
    echo "    -s|--scoped               Scope index.htm to each descendent directory"
    echo 'Options:'
    echo "    -v|--verbose              Verbose"
    echo 'Examples: '
    echo '  # Linux: Generate index.htm in /path/to for all descendent image files, and opens it in firefox'
    echo '  ./webize gallery /path/to | xargs firefox'
    echo '  # Cleanup index.htm'
    echo '  ./webize clean /path/to'
    echo
    echo '  # Linux: Generate a scoped index.htm in each descendent folder of /path/to, and opens it in firefox'
    echo '  ./webize gallery -s /path/to | xargs firefox'
    echo '  # Cleanup index.htm'
    echo '  ./webize clean -s  /path/to'
    echo
}
# Exit if we got no options
if [ $# -eq 0 ]; then usage; exit 1; fi

# Get some options
while test $# -gt 0; do
    case "$1" in
        help|-h|--help)
            usage
            exit 0
            ;;
        gallery)
            GALLERY=1
            shift
            ;;
        clean)
            CLEAN=1
            shift
            ;;
        -s|--scoped)
            SCOPED=1
            shift
            ;;
        -v|--verbose)
            VERBOSE=1
            shift
            ;;
        *)
            DIR="$1"
            shift
            ;;
    esac
done

# Configuration
DIR=${DIR:-}
GALLERY=${GALLERY:-}
CLEAN=${CLEAN:-}
SCOPED=${SCOPED:-}
VERBOSE=${VERBOSE:-}

# Normalization
DIR=$( echo "$DIR" | sed 's@/$@@' ) # Trim trailing '/'
DIR=$( cd "$DIR" && pwd )

# Validation
if [ ! -d "$DIR" ]; then
    echo "Directory does not exist: $DIR" 1>&2
    exit 1
fi

PLATFORM=linux
if echo "${OSTYPE:-}" | grep -iE 'darwin' > /dev/null; then
    PLATFORM=darwin
fi
if ! ls -al --time-style='+%Y' > /dev/null 2>&1; then
    PLATFORM=busybox
fi

if [ -n "$SCOPED" ]; then
    DIRS=$( find "$DIR" -type d )
else
    DIRS="$DIR"
fi

# Generate a index.htm in current directory
if [ -n "$GALLERY" ]; then
    echo "$DIRS" | while read -r d; do
        if [ -n "$VERBOSE" ]; then
            echo "Searching directory: $d" >&2
        fi
        IMAGES_REGEX='(\.gif|\.jpe?g|\.png|\.svg|\.webp)$'
        IMAGES=$(
            if [ -n "$SCOPED" ]; then
                find "$d" -type f -maxdepth 1 | grep -iE "$IMAGES_REGEX"
            else
                find "$d" -type f | grep -iE "$IMAGES_REGEX"
            fi
        )
        if [ -n "$SCOPED" ] && [ -z "$IMAGES" ]; then
            continue
        fi
        if [ -z "$SCOPED" ] && [ -z "$IMAGES" ]; then
            echo "No images found in: $d" >&2
            exit 1
        fi
        IMAGES_CSV=$(
            # Get images files, then parse file attributes into a single CSV
            # E.g.:
            #   -rwxr-xr-x 1 user user 22681 2021-08-27T07:36:45+0000 /path/to/my.png
            # Becomes:
            #   /path/to/my.png,22681,2021-08-27T07:36:45+0000
            if [ "$PLATFORM" = 'darwin' ]; then
                echo "$IMAGES" | while read -r f; do stat -l -t '%Y-%m-%dT%H:%M:%S%z' "$f" | while read -r a b c d size dateiso filename; do echo "$filename,$size,$dateiso"; done; done
            elif [ "$PLATFORM" = 'busybox' ]; then
                echo "$IMAGES" | while read -r f; do ls -al --full-time "$f" | while read -r a b c d size date time timezone filename; do echo "$filename,$size,${date}T${time}${timezone}"; done; done
            else
                echo "$IMAGES" | while read -r f; do ls -al --time-style='+%Y-%m-%dT%H:%M:%S%z' "$f" | while read -r a b c d size dateiso filename; do echo "$filename,$size,$dateiso"; done; done
            fi
        )
        INDEX_HTM="$d/index.htm"
        cat - > "$INDEX_HTM" <<'EOF'
<html lang="en">
<head>
    <meta charset="utf-8">
    <style>
        * { box-sizing: border-box; }
        html { width: 100%; height: 100%; background: #000; font-size: 0; }
        body { margin: 0; }
        menu { position: fixed; top: calc(100vh - 2vw - 4vw); bottom: 0; left: 0; right: 0; z-index: 1000; display: block; padding: 1vw; background: #000; opacity: 1; text-align: center; user-select: none; }
        menu fullscreen, menu stretchx, menu stretchy, menu tilesmaller, menu tilelarger, menu imagelabeller, menu pin, menu sort { display: inline-block; margin-right: 2vw; padding: 1vw; font-size: 2vw; line-height: 2vw; color: #fff; cursor: pointer; }
        content:before { content: ""; display: inline-block; vertical-align: middle; height: 100%; }
        content { display: block; text-align: center; }
        gallery { display: inline-block; width: 100%; text-align: center; vertical-align: middle; opacity: 0; }
        imageholder { position: relative; display: inline-block; margin: 0 auto; border: 1px solid transparent; }
        imageholder info { position: absolute; top: 0; left: 0; right: 0; z-index: 0; }
        imageholder info label { display: block; background: #000; color: #fff; font-size: 1vw; line-height: 1vw; font-family: monospace; overflow: hidden; }
        imageholder img { display: inline-block; margin: 0 auto; width: 100%; height: auto; }
    </style>
</head>
<body>
    <menu>
        <fullscreen title="Full Screen (F)" alt="Full Screen (F)">💻</fullscreen>
        <stretchx title="Stretch horizontal (X)" alt="Stretch horizontal (X)">↔️</stretchx>
        <stretchy title="Stretch vertical (Y)" alt="Stretch vertical (Y)">↕️</stretchy>
        <tilesmaller title="Tile smaller (-)" alt="Tile smaller (-)">🐜</tilesmaller>
        <tilelarger title="Tile larger (+)" alt="Tile larger (=)">🦕</tilelarger>
        <imagelabeller title="Show / Hide label (L)" alt="Show / Hide label (L)">🏷</imagelabeller>
        <sort title="Toggle sort mode" alt="Toggle sort mode"></sort><!-- innerHTML will be injected on DOMContentLoaded -->
        <pin title="Pin / Unpin menu (P)" alt="Pin / Unpin menu (P)">📌</pin>
    </menu>
    <content>
        <gallery></gallery>
    </content>
    <script>
        // Images
        const IMAGES_CSV = `
EOF
        echo "$IMAGES_CSV" >> "$INDEX_HTM"
        cat - >> "$INDEX_HTM" <<'EOF'
`;
        // Parse into image objects
        const imageObjects = (function(IMAGES_CSV) {
            var imageObjects = [];

            var split = IMAGES_CSV.split(/\n/).filter(function (v) { return v !== ''; });
            for (var i = 0; i < split.length; i++) {
                var fileAttr = split[i].split(/,/);
                var filenameSplit = fileAttr[0].split(/\./);
                imageObjects.push({
                    filename: fileAttr[0],
                    size: fileAttr[1],
                    dateiso: fileAttr[2],
                    extension: filenameSplit[filenameSplit.length - 1],
                 });
            }

            return imageObjects;
        }(IMAGES_CSV));

        var Helpers = (function () {
            return {
                copyToClipboard: function(text) {
                    var textarea = document.createElement('textarea');
                    textarea.innerHTML = text;
                    document.body.appendChild(textarea);

                    // Synchronous copy
                    textarea.focus();
                    textarea.select();
                    var result = document.execCommand('copy');

                    document.body.removeChild(textarea);
                    return result;
                },
                getBrowserScrollbarWidth: function() {
                    // Gets the native browser's scrollbar width

                    // Create a mock scrollbox
                    var scrollDiv = document.createElement("div");
                    scrollDiv.setAttribute('style', 'width: 100px; height: 100px; overflow: scroll; position: absolute; z-index: -1000;');
                    document.body.appendChild(scrollDiv);

                    // Get the scrollbar width
                    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;

                    // Remove the scrollbox
                    document.body.removeChild(scrollDiv);

                    return scrollbarWidth;
                },
                htmlEntities: function htmlEntities(str) {
                    return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, '&#39;').replace(/"/g, '&#34;').replace(/ /g, '&nbsp;').replace(/\r?\n/g, '<br />');
                },
            };
        })();

        var menu = (function() {
            var rootElement = document.getElementsByTagName("menu")[0];
            var isPinned = true;
            var isMouseEntered = false;
            var sortModeIndex = 0;
            var sortModes = [
                {
                    "label": "🔤🔼",
                    "keys": [
                        "filename"
                    ],
                    "order": "asc",
                },
                {
                    "label": "🔤🔽",
                    "keys": [
                        "filename"
                    ],
                    "order": "desc",
                },
                {
                    "label": "📆🔼",
                    "keys": [
                        "dateiso"
                    ],
                    "order": "asc",
                },
                {
                    "label": "📆🔽",
                    "keys": [
                        "dateiso"
                    ],
                    "order": "desc",
                },
                {
                    "label": "🍱🔼",
                    "keys": [
                        "extension"
                    ],
                    "order": "asc",
                },
                {
                    "label": "🍱🔽",
                    "keys": [
                        "extension"
                    ],
                    "order": "desc",
                },
                {
                    "label": "🔢🔼",
                    "keys": [
                        "size"
                    ],
                    "order": "asc",
                },
                {
                    "label": "🔢🔽",
                    "keys": [
                        "size"
                    ],
                    "order": "desc",
                }
            ];

            // Init
            document.addEventListener("DOMContentLoaded", function(event) {
                var sort = document.getElementsByTagName("sort")[0];
                sort.innerHTML = sortModes[sortModeIndex].label;
            });

            rootElement.addEventListener("mouseenter", function(e) {
                isMouseEntered = true;
                rootElement.style.opacity = "1";
                rootElement.style.paddingTop = "";
            });
            rootElement.addEventListener("mouseleave", function(e) {
                isMouseEntered = false;
                if (!isPinned) {
                    rootElement.style.opacity = "0";
                    rootElement.style.paddingTop = "100vh"; // Push the menu items out of viewport
                }
            });

            var toggleFullscreenHandler = function() {
                document.documentElement.requestFullscreen();
            };
            rootElement.getElementsByTagName("fullscreen")[0].addEventListener("click", function(e) {
                toggleFullscreenHandler();
            });

            rootElement.getElementsByTagName("stretchx")[0].addEventListener("click", function(e) {
                gallery.mode = "stretchx";
            });
            rootElement.getElementsByTagName("stretchy")[0].addEventListener("click", function(e) {
                gallery.mode = "stretchy";
            });
            rootElement.getElementsByTagName("tilesmaller")[0].addEventListener("click", function(e) {
                gallery.mode = "tilesmaller";
            });
            rootElement.getElementsByTagName("tilelarger")[0].addEventListener("click", function(e) {
                gallery.mode = "tilelarger";
            });

            var toggleLabelHandler = function() {
                var imagelabeller = document.getElementsByTagName("imagelabeller")[0];
                if (gallery.isImagesLabelled) {
                    gallery.isImagesLabelled = false;
                    imagelabeller.style.opacity = "0.5";
                }else {
                    gallery.isImagesLabelled = true;
                    imagelabeller.style.opacity = "1.0";
                }
            };
            rootElement.getElementsByTagName("imagelabeller")[0].addEventListener("click", function(e) {
                toggleLabelHandler();
            });

            var togglePinHandler = function() {
                var pin = document.getElementsByTagName("pin")[0];
                if (isPinned) {
                    isPinned = false;
                    if (isMouseEntered) {
                        rootElement.style.opacity = "";
                        rootElement.style.paddingTop = "";
                    }else {
                        rootElement.style.opacity = "0";
                        rootElement.style.paddingTop = "100vh"; // Push the menu items out of viewport
                    }
                    pin.style.opacity = "0.5";
                }else {
                    isPinned = true;
                    rootElement.style.opacity = "1.0";
                    rootElement.style.paddingTop = "";
                    pin.style.opacity = "1.0";
                }
            };
            rootElement.getElementsByTagName("pin")[0].addEventListener("click", function(e) {
                togglePinHandler();
            });

            var toggleSortMode = function() {
                var sort = document.getElementsByTagName("sort")[0];

                sortModeIndex = sortModeIndex === sortModes.length - 1 ? 0 : sortModeIndex + 1;
                sort.innerHTML = sortModes[sortModeIndex].label;
                gallery.sort(sortModes[sortModeIndex]);
            };
            rootElement.getElementsByTagName("sort")[0].addEventListener("click", function(e) {
                toggleSortMode();
            });

            var keydownHandler = function(event) {
                var ele = event.target || event.srcElement;
                var keyCode = event.keyCode || event.charCode;

                // f key
                if (keyCode === 70) {
                    toggleFullscreenHandler();
                }
                // l key
                if (keyCode === 76) {
                    toggleLabelHandler();
                }
                // s key
                if (keyCode === 83) {
                    toggleSortMode();
                }
                // p key
                if (keyCode === 80) {
                    togglePinHandler();
                }
            };

            return {
                keydownHandler: keydownHandler,
                get sortMode() {
                    return sortModes[sortModeIndex];
                },
                togglePinHandler: togglePinHandler
            };
        })();

        var gallery = (function(imageObjs) {
            var rootElement = document.getElementsByTagName("gallery")[0];

            // Config
            var imageObjects = imageObjs;

            // State
            var mode = "tilesmaller";
            var images;
            var activeImageIndex = 0;
            var tileFactor = 3;
            const minTileFactor = 2;
            const maxTileFactor = 10;
            var isImagesLabelled = true;

            // Init
            document.addEventListener("DOMContentLoaded", function(event) {
                createImageComponents(menu.sortMode);
                setMode(mode);
                setTimeout(function() {
                    rootElement.style.opacity = "1.0";
                }, 1000);
            });

            var createImageComponents = function(sortMode) {
                // Sort image objects by the given sort mode object
                for (var i = 0, k; i < sortMode.keys.length; i++) {
                    k = sortMode.keys[i];
                    imageObjects.sort(function(a, b) {
                        if (sortMode.order === 'asc') {
                            if (a[k] < b[k]) {
                                return -1;
                            }
                            if (a[k] > b[k]) {
                                return 1;
                            }
                        }
                        if (sortMode.order === 'desc') {
                            if (a[k] < b[k]) {
                                return 1;
                            }
                            if (a[k] > b[k]) {
                                return -1;
                            }
                        }
                        return 0;
                    });
                }
                // console.log(sortMode);
                // console.log(imageObjects);

                // Generate new image components
                var imageComponents = [];
                // E.g.
                // <imageholder>
                //   <info>
                //     <label>$i</label>
                //   </info>
                //   <img src=\"$i\" />
                // </imageholder>
                var imageholder, info, label, img;
                for (var i = 0; i < imageObjects.length; i++) {
                    imageholder = document.createElement("imageholder");
                    info = document.createElement("info");
                    label = document.createElement("label");
                    label.innerHTML = Helpers.htmlEntities(imageObjects[i].filename);
                    img = document.createElement("img");
                    img.src = 'file://' + imageObjects[i].filename;
                    img.alt = Helpers.htmlEntities(imageObjects[i].filename);

                    info.appendChild(label);
                    imageholder.appendChild(info);
                    imageholder.appendChild(img);

                    imageComponents.push(imageholder);
                }

                // Add events - Set as element of interest while clicking or focusing
                var clickOrFocusHandler = function(e) {
                    if (mode === "stretchx" || mode === "stretchy" ) {
                        // Tap on image should toggle the menu
                        menu.togglePinHandler();
                    }
                    var ele = event.target || event.srcElement;
                    var imageholder = ele.parentNode;
                    var idx = Array.from(imageholder.parentNode.children).indexOf(imageholder); // Wrapper
                    setActiveImageIndex(idx);
                    setMode("stretchy");
                };
                for (var i = 0; i < imageComponents.length; i++) {
                    imageComponents[i].addEventListener("click", clickOrFocusHandler);
                    imageComponents[i].addEventListener("focus", clickOrFocusHandler);
                }

                // Replace gallery with new image components
                rootElement.innerHTML = '';
                for (var i = 0; i < imageComponents.length; i++) {
                    rootElement.appendChild(imageComponents[i]);
                }

                // Cache the image elements
                images = rootElement.getElementsByTagName("img");
            };

            var copyActiveImageFilePath = function() {
                var scrollTop = document.body.scrollTop; // Save the original scrollTop
                Helpers.copyToClipboard(images[activeImageIndex].getAttribute('alt'));
                // setActiveImageIndex(activeImageIndex, true);
                images[activeImageIndex].style.opacity = 0.5;
                var activeImageIndexTmp = activeImageIndex;
                setTimeout(function() {
                    images[activeImageIndexTmp].style.opacity = 1;
                }, 500);
                document.body.scrollTop = scrollTop; // Restore the original scrollTop
            };

            var stretchx = function() {
                const viewportWidth = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
                for (var i = 0; i < images.length; i++) {
                    images[i].parentNode.style.display = "block";
                    images[i].parentNode.style.width = "100%";
                    images[i].parentNode.style.height = "auto";
                    images[i].style.width = viewportWidth + 'px';
                    images[i].style.height = "auto";
                }
                setActiveImageIndex(activeImageIndex, true);
            };

            var stretchy = function() {
                const viewportHeight = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
                for (var i = 0; i < images.length; i++) {
                    images[i].parentNode.style.display = "block";
                    images[i].parentNode.style.width = "100%";
                    images[i].parentNode.style.height = "auto";
                    images[i].style.width = "auto";
                    images[i].style.height = viewportHeight + 'px';
                }
                setActiveImageIndex(activeImageIndex, true);
            };

            var tilesmaller = function(preserve) {
                if (!preserve) {
                    tileFactor = tileFactor === maxTileFactor ? maxTileFactor : tileFactor + 1;
                }
                for (var i = 0; i < images.length; i++) {
                    images[i].parentNode.style.display = "inline-block";
                    images[i].parentNode.style.verticalAlign = "top";
                    images[i].parentNode.style.width = "calc(100% / " + tileFactor + ")";
                    images[i].parentNode.style.height = "calc(100% / " + tileFactor + ")";
                    if (images[i].naturalWidth >= images[i].naturalHeight) {
                        // Landscape
                        images[i].style.width = "100%";
                        images[i].style.height = "auto";
                    }else {
                        // Portrait
                        images[i].style.width = "auto";
                        images[i].style.height = "100%";
                    }
                }
                setActiveImageIndex(activeImageIndex, true);
            };

            var tilelarger = function(preserve) {
                if (!preserve) {
                    tileFactor = tileFactor === minTileFactor ? minTileFactor : tileFactor - 1;
                }
                for (var i = 0; i < images.length; i++) {
                    images[i].parentNode.style.display = "inline-block";
                    images[i].parentNode.style.verticalAlign = "top";
                    images[i].parentNode.style.width = "calc(100% / " + tileFactor + ")";
                    images[i].parentNode.style.height = "calc(100% / " + tileFactor + ")";
                    if (images[i].naturalWidth >= images[i].naturalHeight) {
                        // Landscape
                        images[i].style.width = "100%";
                        images[i].style.height = "auto";
                    }else {
                        // Portrait
                        images[i].style.width = "auto";
                        images[i].style.height = "100%";
                    }
                }
                setActiveImageIndex(activeImageIndex, true);
            };

            var resetImagesStyles = function() {
                for (var i = 0; i < images.length; i++) {
                    var imageholder = images[i].parentNode;
                    imageholder.className = "";
                }
            }

            var showAllImageLabels = function() {
                for (var i = 0; i < images.length; i++) {
                    var imageholder = images[i].parentNode;
                    imageholder.getElementsByTagName("label")[0].style.opacity = "1.0";
                }
            };
            var hideAllImageLabels = function() {
                for (var i = 0; i < images.length; i++) {
                    var imageholder = images[i].parentNode;
                    imageholder.getElementsByTagName("label")[0].style.opacity = "0.0";
                }
            };

            var setMode = function(value, preserve) {
                var modePrev = mode;
                if (value) {
                    mode = value;
                }
                switch (value) {
                    case "stretchx":
                        stretchx();
                        break;
                    case "stretchy":
                        stretchy();
                        break;
                    case "tilesmaller":
                        if (modePrev === "tilesmaller" || modePrev === "tilelarger") {
                            tilesmaller(preserve);
                        }else {
                            tilesmaller(true);
                        }
                        break;
                    case "tilelarger":
                        if (modePrev === "tilesmaller" || modePrev === "tilelarger") {
                            tilelarger(preserve);
                        }else {
                            tilelarger(true);
                        }
                        break;
                    default:
                        break;
                }
            };

            var setActiveImageIndex = function(value, scroll) {
                activeImageIndex = value;
                var imageholder;
                if (mode === "stretchx" || mode === "stretchy") {
                    for (var i = 0; i < images.length; i++) {
                        imageholder = images[i].parentNode;
                        imageholder.style.display = "none";
                        imageholder.style.border = "0px";
                    }
                    var activeImageholder = images[activeImageIndex].parentNode;
                    activeImageholder.style.display = "block";
                }else if (mode === "tilesmaller" || mode === "tilelarger") {
                    for (var i = 0; i < images.length; i++) {
                        imageholder = images[i].parentNode;
                        imageholder.style.border = "";
                    }
                    var activeImageholder = images[activeImageIndex].parentNode;
                    activeImageholder.style.border = "1px solid #fff";
                }
                if (scroll) {
                    scrollToActiveImage();
                }
                console.log("[setActiveImageIndex] activeImageIndex: " + activeImageIndex);
            };

            var setPreviousImageAsActiveImage = function() {
                if (activeImageIndex <= 0) {
                    // Go to end
                    setActiveImageIndex(images.length - 1, true);
                }else {
                    var imageholder = images[activeImageIndex].parentNode;
                    var idx = Array.from(imageholder.parentNode.children).indexOf(imageholder); // Wrapper
                    idx -= 1;
                    var scroll = (function(images, idx) {
                        const viewportHeight = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
                        if (images[idx].parentNode.offsetTop < window.scrollY) {
                            return true;
                        }
                        return false;
                    }(images, idx));
                    setActiveImageIndex(idx, scroll);
                }
            };

            var setNextImageAsActiveImage = function() {
                if (activeImageIndex >= images.length - 1) {
                    // Go to start
                    setActiveImageIndex(0, true);
                }else {
                    var imageholder = images[activeImageIndex].parentNode;
                    var idx = Array.from(imageholder.parentNode.children).indexOf(imageholder); // Wrapper
                    idx += 1;
                    var scroll = (function(images, idx) {
                        const viewportHeight = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
                        if (images[idx].parentNode.offsetTop + images[idx].parentNode.offsetHeight > window.scrollY + viewportHeight) {
                            return true;
                        }
                        return false;
                    }(images, idx));
                    setActiveImageIndex(idx, scroll);
                }
            };

            var setPreviousRowImageAsActiveImage = function() {
                var imageholder = images[activeImageIndex].parentNode;
                var idx = Array.from(imageholder.parentNode.children).indexOf(imageholder); // Wrapper
                var rem = images.length % tileFactor;
                console.log('rem: ' + rem);
                if (rem > 0 && activeImageIndex + 1 >= images.length - rem) {
                    // On the last row with a non-full row. We should scroll less than tileFactor thumbnails
                    var missing = tileFactor - rem;
                    var missingFromCenter = Math.floor(missing / 2);
                    console.log('missing: ' + missing + ', missingFromCenter: ' + missingFromCenter);
                    idx -= tileFactor - missingFromCenter;
                }else {
                    idx -= tileFactor;
                }
                if (idx <= 0) {
                    idx = 0;
                }
                var scroll = (function(images, idx) {
                    const viewportHeight = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
                    if (images[idx].parentNode.offsetTop < window.scrollY) {
                        return true;
                    }
                    return false;
                }(images, idx));
                setActiveImageIndex(idx, scroll);
            };

            var setNextRowImageAsActiveImage = function() {
                var imageholder = images[activeImageIndex].parentNode;
                var idx = Array.from(imageholder.parentNode.children).indexOf(imageholder); // Wrapper
                var rem = images.length % tileFactor;
                var missing = tileFactor - rem;
                var missingFromCenter = Math.floor(missing / 2);
                console.log('rem: ' + rem);
                console.log('missing: ' + missing + ', missingFromCenter: ' + missingFromCenter);
                if (activeImageIndex + tileFactor + 1 >= images.length - rem) {
                    // On second last row
                    if ((activeImageIndex + 1) % tileFactor > 0 && (activeImageIndex + 1) % tileFactor <= missingFromCenter) {
                        // Scroll to first image on last row
                        console.log("Scrolling to first image of last row");
                        idx = images.length - 1 - rem + 1;
                    }else {
                        // On the row just prior to a non-full last row. We should scroll less than tileFactor thumbnails
                        idx += tileFactor - missingFromCenter;
                    }
                }else {
                    idx += tileFactor;
                }
                if (idx >= images.length - 1) {
                    idx = images.length - 1;
                }
                var scroll = (function(images, idx) {
                    const viewportHeight = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
                    if (images[idx].parentNode.offsetTop + images[idx].parentNode.offsetHeight > window.scrollY + viewportHeight) {
                        return true;
                    }
                    return false;
                }(images, idx));
                setActiveImageIndex(idx, scroll);
            };

            var setPreviousPageImageAsActiveImage = function() {
                const imageholderMaxHeight = (function(images) {
                    // Find the tallest image in the first row
                    var max = 0, lastmax = 0;
                    for (var i = 0; i < images.length - 1 && i < tileFactor; i++) {
                        tmp =  images[i].parentNode.offsetHeight;
                        max = tmp > max ? tmp : max;
                    }
                    return max;
                })(images);
                const viewportHeight = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
                const rows = Math.floor(viewportHeight / imageholderMaxHeight); // Number of rows of thumbnails that fit in viewport without being cut off
                console.log('rows: ' + rows);

                var imageholder = images[activeImageIndex].parentNode;
                var idx = Array.from(imageholder.parentNode.children).indexOf(imageholder); // Wrapper
                idx -= tileFactor * (rows - 1)
                if (idx <= 0) {
                    idx = 0;
                }
                setActiveImageIndex(idx, true);
            };
            var setNextPageImageAsActiveImage = function() {
                const imageholderMaxHeight = (function(images) {
                    // Find the tallest image in the first row
                    var max = 0, lastmax = 0;
                    for (var i = 0; i < images.length - 1 && i < tileFactor; i++) {
                        tmp =  images[i].parentNode.offsetHeight;
                        max = tmp > max ? tmp : max;
                    }
                    return max;
                })(images);
                const viewportHeight = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
                const rows = Math.floor(viewportHeight / imageholderMaxHeight); // Number of rows of thumbnails that fit in viewport without being cut off
                console.log('rows: ' + rows);

                var imageholder = images[activeImageIndex].parentNode;
                var idx = Array.from(imageholder.parentNode.children).indexOf(imageholder); // Wrapper
                idx += tileFactor * (rows - 1); // If starting at row 1, and screen only fits 5 rows, with 6th row cut off, scroll to first image of 5th row

                if (idx >= images.length - 1) {
                    idx = images.length - 1;
                }
                setActiveImageIndex(idx, true);
            };

            var scrollToActiveImage = function() {
                console.log("Scrolling to active image, index: " + activeImageIndex + ", offsetTop: " + images[activeImageIndex].parentNode.offsetTop);
                window.scroll(0, images[activeImageIndex].parentNode.offsetTop);
            };

            var setScopeImageAsActiveImage = function() {
                if (mode === "stretchx" || mode === "stretchy" ) {
                    for (var i = images.length - 1; i >= 0; i--) {
                        if (images[i].parentNode.offsetTop < window.scrollY) {
                            console.log("Setting active image: " + i);
                            setActiveImageIndex(i);
                            break;
                        }
                    }
                }
            }
            // Set element of interest while scrolling
            // rootElement.addEventListener("wheel", function(e) {
            //     setScopeImageAsActiveImage();
            // });

            var sort = function(sortMode) {
                createImageComponents(sortMode);
                setMode(mode, true);
            }

            var keydownHandler = function(event) {
                var ele = event.target || event.srcElement;
                var keyCode = event.keyCode || event.charCode;
                var key = event.key;

                // LEFT arrow key
                if (keyCode === 37) {
                    setPreviousImageAsActiveImage();
                    event.preventDefault();
                }
                // RIGHT arrow key
                if (keyCode === 39) {
                    setNextImageAsActiveImage();
                    event.preventDefault();
                }
                // UP arrow key
                if (keyCode === 38) {
                    if (mode === "tilesmaller" || mode === "tilelarger") {
                        setPreviousRowImageAsActiveImage();
                    }else {
                        setPreviousImageAsActiveImage();
                    }
                    event.preventDefault();
                }
                // DOWN arrow key
                if (keyCode === 40) {
                    if (mode === "tilesmaller" || mode === "tilelarger") {
                        setNextRowImageAsActiveImage();
                    }else {
                        setNextImageAsActiveImage();
                    }
                    event.preventDefault();
                }
                // PageUp
                if (keyCode === 33) {
                    if (mode === "tilesmaller" || mode === "tilelarger") {
                        setPreviousPageImageAsActiveImage();
                        event.preventDefault();
                    }else {
                        setScopeImageAsActiveImage();
                    }
                }
                // PageDown
                if (keyCode === 34) {
                    if (mode === "tilesmaller" || mode === "tilelarger") {
                        setNextPageImageAsActiveImage();
                        event.preventDefault();
                    }else {
                        setScopeImageAsActiveImage();
                    }
                }
                // Home
                if (keyCode === 36) {
                    setActiveImageIndex(0, true);
                }
                // End
                if (keyCode === 35) {
                    setActiveImageIndex(images.length - 1, true);
                }
                // ENTER key
                if (keyCode === 13) {
                    setMode("stretchy");
                    event.preventDefault();
                }
                // BACKSPACE key
                if (keyCode == 8) {
                    setMode("tilesmaller");
                    event.preventDefault();
                }
                // SPACE key
                if (keyCode == 32) {
                    setNextImageAsActiveImage();
                    event.preventDefault();
                }
                // ESC key (if in full screen, escapes full screen first, goes back to tiled view, and tiles smaller)
                if (keyCode === 27) {
                    setMode("tilesmaller", true);
                    event.preventDefault();
                }

                // x key
                if (keyCode === 88) {
                    setMode("stretchx");
                    event.preventDefault();
                }
                // y key
                if (keyCode === 89) {
                    setMode("stretchy");
                    event.preventDefault();
                }
                // - key
                if (keyCode === 173) {
                    setMode("tilesmaller");
                    event.preventDefault();
                }
                // = key
                if (keyCode === 61) {
                    setMode("tilelarger");
                    event.preventDefault();
                }
                // c key
                if (keyCode === 67) {
                    copyActiveImageFilePath();
                    event.preventDefault();
                }

                // console.log(keyCode);
            };
            return {
                get keyEnabled() {
                    return keyEnabled;
                },
                get mode() {
                    return mode;
                },
                set mode(value) {
                    setMode(value);
                },
                get isImagesLabelled() {
                    return isImagesLabelled;
                },
                set isImagesLabelled(value) {
                    isImagesLabelled = value;
                    if (isImagesLabelled) {
                        showAllImageLabels();
                    }else {
                        hideAllImageLabels();
                    }
                },
                sort: sort,
                keydownHandler: keydownHandler
            };
        })(imageObjects);

        var keyController = (function() {
            var keyEnabled = true;
            var keyLock = false;
            var shiftKeyDown = false;
            var ctrlKeyDown = false;
            var altKeyDown = false;

            var keydownHandler = function(event) {
                var ele = event.target || event.srcElement;
                var keyCode = event.keyCode || event.charCode;
                var key = event.key;
                console.log('[keydownHandler] keyCode: ' + keyCode + ', key: ' + key);

                // 'k' key
                if (keyCode == 75) {
                    if (keyLock) {
                        console.log('Disabling keylock');
                        keyLock = false;
                    }else {
                        console.log('Enabling keylock');
                        keyLock = true;
                    }
                }
                // Disable hotkeys when any of SHIFT, CTRL, ALT keys are pressed
                if (keyCode == 16) {
                    shiftKeyDown = true;
                }
                if (keyCode == 17) {
                    ctrlKeyDown = true;
                }
                if (keyCode == 18) {
                    altKeyDown = true;
                }
                if (keyLock || shiftKeyDown || ctrlKeyDown || altKeyDown) {
                    console.log('[keydownHandler] Disabling hotkeys');
                    keyEnabled = false;
                }

                if (!keyEnabled) {
                    return;
                }
                menu.keydownHandler(event);
                gallery.keydownHandler(event);
            }

            var keyupHandler = function(event) {
                var ele = event.target || event.srcElement;
                var keyCode = event.keyCode || event.charCode;
                var key = event.key;
                console.log('[keyupHandler] keyCode: ' + keyCode + ', key: ' + key);

                // Enable hotkeys only when SHIFT, CTRL, and ALT keys are not pressed
                if (keyCode == 16) {
                    shiftKeyDown = false;
                }
                if (keyCode == 17) {
                    ctrlKeyDown = false;
                }
                if (keyCode == 18) {
                    altKeyDown = false;
                }
                // If pressing SHIFT+TAB, CTRL+TAB, ALT+TAB, consider keys as not pressed
                // if (keyCode == 9) {
                //     console.log('[keydownHandler] TAB detected, considering all keys as not pressed');
                //     shiftKeyDown = false;
                //     ctrlKeyDown = false;
                //     altKeyDown = false;
                // }
                if (!keyLock && !shiftKeyDown && !ctrlKeyDown && !altKeyDown) {
                    console.log('[keydownHandler] Enabling hotkeys');
                    keyEnabled = true;
                }
            }

            var visibilityChangeHandler = function(event) {
                console.log('[visibilitychange] visbilityState: ' + document.hidden);
                console.log('[visibilitychange] Considering all keys as not pressed');
                shiftKeyDown = false;
                ctrlKeyDown = false;
                altKeyDown = false;
            }
            return {
                keydownHandler: keydownHandler,
                keyupHandler: keyupHandler,
                visibilityChangeHandler: visibilityChangeHandler
            };
        }());

        // App Events
        window.addEventListener("keydown", function (event) {
            keyController.keydownHandler(event);
        });
        window.addEventListener("keyup", function (event) {
            keyController.keyupHandler(event);
        });
        document.addEventListener("visibilitychange", function (event) {
            keyController.visibilityChangeHandler(event);
        });
    </script>
</body>
</html>
EOF
        echo "$INDEX_HTM"
    done
fi

# Remove index.htm in each directory
if [ -n "$CLEAN" ]; then
    echo "$DIRS" | while read -r d; do
        if [ -n "$VERBOSE" ]; then
            echo "Searching directory: $d" >&2
        fi
        INDEX_HTM="$d/index.htm"
        if [ -f "$INDEX_HTM" ]; then
            rm -f "$INDEX_HTM"
            echo "$INDEX_HTM"
        fi
    done
fi
